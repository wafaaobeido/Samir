@model Models.Order

@{
    /**/

    ViewBag.Title = "AddOrder";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>AddOrder</h2>
@if (Session["User"] == null)
{
    Response.Redirect("../Product/ViewProducts");
}

else if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-danger">
            @ViewBag.Message
        </div>
    }
}
else
{

    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Order</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.product.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.product.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.product.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <input name="Quantity" type="number" min="1" max="10" step="1" />
            <div class="form-group">
                @Html.LabelFor(model => model.User.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.User.FirstName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.User.FirstName, "", new { @class = "text-danger" })
                </div>
            </div><div class="form-group">
                @Html.LabelFor(model => model.verkoper.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.verkoper.FirstName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.verkoper.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.User.Adress, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.User.Adress, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.User.Adress, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Ordertime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Ordertime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Ordertime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DeliveryTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DeliveryTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.DeliveryTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Maak order" class="btn btn-default" />
                </div>
            </div>
            @Html.Hidden("User.Id", Model.User.Id)
            @Html.Hidden("verkoper.Id", Model.verkoper.Id)
            @Html.Hidden("product.Id", Model.product.Id)

        </div>
    }

   @* if (Model != null)
    {
        @*ToDo
        <div class="slider-contract">
            <div class="preview col-md-6">

                <div class="preview-pic tab-content">
                    <div class="slideshow-container">
                        <!-- Full-width images with number and caption text -->
                        @for (int i = 0; i < Model.product.Picture.Count; i++)
                        {
                            <div class="w3-content w3-display-container">

                                <div class="w3-display-container mySlides">
                                    <img class="estate-image" src="@Url.Content(Model.product.Picture[i])" style="width:100%">
                                </div>
                            </div>
                            <button class="w3-button w3-display-left w3-black" onclick="plusDivs(-1)">&#10094;</button>
                            <button class="w3-button w3-display-right w3-black" onclick="plusDivs(1)">&#10095;</button>
                        }
                    </div>
                    <script src="~/Scripts/ScriptFile/Site.js"></script>
                </div>
            </div>
        </div>
    }
*@

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
